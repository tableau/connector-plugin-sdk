<?xml version='1.0' encoding='utf-8' ?>

<dialect class='sqlite_extract' name='SQLiteODBCExtractDialect' version='18.1'>
  <function-map>
    <function group='numeric' name='ABS' return-type='real'>
      <formula>{fn ABS(%1)}</formula>
      <argument type='real' />
    </function>
    <function group='numeric' name='ABS' return-type='int'>
      <formula>{fn ABS(%1)}</formula>
      <argument type='int' />
    </function>
    <function group='numeric' name='ACOS' return-type='real'>
      <formula>{fn ACOS(%1)}</formula>
      <argument type='real' />
    </function>
    <function group='numeric' name='ASIN' return-type='real'>
      <formula>{fn ASIN(%1)}</formula>
      <argument type='real' />
    </function>
    <function group='numeric' name='ATAN' return-type='real'>
      <formula>{fn ATAN(%1)}</formula>
      <argument type='real' />
    </function>
    <function group='numeric' name='ATAN2' return-type='real'>
      <formula>{fn ATAN2(%1,%2)}</formula>
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='numeric' name='CEILING' return-type='int'>
      <formula>CAST(CAST({fn CEILING(%1)} AS BIGINT) AS FLOAT)</formula>
      <argument type='real' />
    </function>
    <function group='numeric' name='COS' return-type='real'>
      <formula>{fn COS(%1)}</formula>
      <argument type='real' />
    </function>
    <function group='numeric' name='COT' return-type='real'>
      <formula>(CASE WHEN %1 &lt;&gt; 0 THEN {fn COT(%1)} ELSE NULL END)</formula>
      <argument type='real' />
    </function>
    <function group='numeric' name='DEGREES' return-type='real'>
      <formula>{fn DEGREES(%1)}</formula>
      <argument type='real' />
    </function>
    <function group='numeric' name='DIV' return-type='int'>
      <formula>CASE WHEN %2 = 0 THEN NULL ELSE ( %1 / %2 ) END</formula>
      <argument type='int' />
      <argument type='int' />
    </function>
    <function group='numeric' name='EXP' return-type='real'>
      <formula>{fn EXP(%1)}</formula>
      <argument type='real' />
    </function>
    <function group='numeric' name='FLOOR' return-type='int'>
      <formula>CAST(CAST({fn FLOOR(%1)} AS BIGINT) AS FLOAT)</formula>
      <argument type='real' />
    </function>
    <function group='numeric' name='HEXBINX' return-type='real'>
      <formula>(((CASE WHEN (ABS((%2) - (CAST( ( (%2) / SQRT(3.0) ) AS NUMERIC(18, 0) ) * SQRT(3.0)))) + SQRT(3.0) * ((ABS((%1) - (CAST( ( (%1) / 3.0 ) AS NUMERIC(18, 0) ) * 3.0))) - 1.0) &gt; 0.0 THEN 1.5 ELSE 0.0 END) - (CASE WHEN ((%1) - (CAST( ( (%1) / 3.0 ) AS NUMERIC(18, 0) ) * 3.0) &lt; 0.0) AND ((CASE WHEN (ABS((%2) - (CAST( ( (%2) / SQRT(3.0) ) AS NUMERIC(18, 0) ) * SQRT(3.0)))) + SQRT(3.0) * ((ABS((%1) - (CAST( ( (%1) / 3.0 ) AS NUMERIC(18, 0) ) * 3.0))) - 1.0) &gt; 0.0 THEN 1.5 ELSE 0.0 END) &gt; 0.0) THEN 3.0 ELSE 0.0 END)) + (CAST( ( (%1) / 3.0 ) AS NUMERIC(18, 0) ) * 3.0))</formula>
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='numeric' name='HEXBINY' return-type='real'>
      <formula>CAST( (((CASE WHEN (ABS((%2) - (CAST( ( (%2) / SQRT(3.0) ) AS NUMERIC(18, 0) ) * SQRT(3.0)))) + SQRT(3.0) * ((ABS((%1) - (CAST( ( (%1) / 3.0 ) AS NUMERIC(18, 0) ) * 3.0))) - 1.0) &gt; 0.0 THEN SQRT(3.0) / 2.0 ELSE 0.0 END) - (CASE WHEN ((%2) - (CAST( ( (%2) / SQRT(3.0) ) AS NUMERIC(18, 0) ) * SQRT(3.0)) &lt; 0.0) AND ((CASE WHEN (ABS((%2) - (CAST( ( (%2) / SQRT(3.0) ) AS NUMERIC(18, 0) ) * SQRT(3.0)))) + SQRT(3.0) * ((ABS((%1) - (CAST( ( (%1) / 3.0 ) AS NUMERIC(18, 0) ) * 3.0))) - 1.0) &gt; 0.0 THEN SQRT(3.0) / 2.0 ELSE 0.0 END) &gt; 0.0) THEN SQRT(3.0) ELSE 0.0 END)) + (CAST( ( (%2) / SQRT(3.0) ) AS NUMERIC(18, 0) ) * SQRT(3.0))) AS NUMERIC(18,3) )</formula>
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='numeric' name='LN' return-type='real'>
      <formula>(CASE WHEN %1 &gt; 0 THEN {fn LOG(%1)} ELSE NULL END)</formula>
      <argument type='real' />
    </function>
    <function group='numeric' name='LOG' return-type='real'>
      <formula>(CASE WHEN %1 &gt; 0 THEN {fn LOG10(%1)} ELSE NULL END)</formula>
      <argument type='real' />
    </function>
    <function group='numeric' name='LOG' return-type='real'>
      <formula>(CASE WHEN %1 &gt; 0 THEN {fn LOG10(%1)} / {fn LOG10(%2)} ELSE NULL END)</formula>
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='numeric' name='MAX' return-type='real'>
      <formula>(CASE&#10;&#9;WHEN (%1 IS NULL) OR (%2 IS NULL) THEN NULL&#10;&#9;WHEN %1 &gt; %2 THEN %1&#10;&#9;ELSE %2 END)</formula>
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='numeric' name='MAX' return-type='int'>
      <formula>(CASE&#10;&#9;WHEN (%1 IS NULL) OR (%2 IS NULL) THEN NULL&#10;&#9;WHEN %1 &gt; %2 THEN %1&#10;&#9;ELSE %2 END)</formula>
      <argument type='int' />
      <argument type='int' />
    </function>
    <function group='numeric' name='MIN' return-type='real'>
      <formula>(CASE&#10;&#9;WHEN (%1 IS NULL) OR (%2 IS NULL) THEN NULL&#10;&#9;WHEN %1 &lt; %2 THEN %1&#10;&#9;ELSE %2 END)</formula>
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='numeric' name='MIN' return-type='int'>
      <formula>(CASE&#10;&#9;WHEN (%1 IS NULL) OR (%2 IS NULL) THEN NULL&#10;&#9;WHEN %1 &lt; %2 THEN %1&#10;&#9;ELSE %2 END)</formula>
      <argument type='int' />
      <argument type='int' />
    </function>
    <function group='numeric' name='PI' return-type='real'>
      <formula>{fn PI()}</formula>
    </function>
    <function group='numeric' name='POWER' return-type='real'>
      <formula>(CASE WHEN %1 &lt; 0 AND FLOOR(%2) &lt;&gt; %2 THEN NULL ELSE POW(%1,%2) END)</formula>
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='numeric' name='POWER' return-type='real'>
      <formula>POW(%1,%2)</formula>
      <argument type='real' />
      <argument type='int' />
    </function>
    <function group='numeric' name='POWER' return-type='real'>
      <formula>CAST(%1 AS FLOAT) ^ %2</formula>
      <argument type='int' />
      <argument type='int' />
    </function>
    <function group='numeric' name='RADIANS' return-type='real'>
      <formula>{fn RADIANS(%1)}</formula>
      <argument type='real' />
    </function>
    <function group='numeric' name='ROUND' return-type='real'>
      <formula>ROUND(%1)</formula>
      <argument type='real' />
    </function>
    <function group='numeric' name='ROUND' return-type='real'>
      <formula>ROUND(CAST(%1 AS NUMERIC),CAST(%2 AS INTEGER))</formula>
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='numeric' name='ROUND' return-type='real'>
      <formula>ROUND(CAST(%1 AS NUMERIC),%2)</formula>
      <argument type='real' />
      <argument type='int' />
    </function>
    <function group='numeric' name='SIGN' return-type='int'>
      <formula>{fn SIGN(%1)}</formula>
      <argument type='real' />
    </function>
    <function group='numeric' name='SIN' return-type='real'>
      <formula>{fn SIN(%1)}</formula>
      <argument type='real' />
    </function>
    <function group='numeric' name='SQRT' return-type='real'>
      <formula>(CASE WHEN %1 &lt; 0 THEN NULL ELSE {fn SQRT(%1)} END)</formula>
      <argument type='real' />
    </function>
    <function group='numeric' name='SQUARE' return-type='real'>
      <formula>%1 ^ 2</formula>
      <argument type='real' />
    </function>
    <function group='numeric' name='TAN' return-type='real'>
      <formula>{fn TAN(%1)}</formula>
      <argument type='real' />
    </function>
    <function group='numeric;logical' name='ZN' return-type='real'>
      <formula>{fn IFNULL(%1, 0)}</formula>
      <argument type='real' />
    </function>
    <function group='numeric;logical' name='ZN' return-type='int'>
      <formula>{fn IFNULL(%1, 0)}</formula>
      <argument type='int' />
    </function>
    <function group='string' name='ASCII' return-type='int'>
      <formula>{fn ASCII(%1)}</formula>
      <argument type='str' />
    </function>
    <function group='string' name='CHAR' return-type='str'>
      <formula>(CASE WHEN (%1 &gt;= 0) AND (%1 &lt; 256) THEN {fn CHAR(CAST(TRUNC(%1) AS INTEGER))} ELSE NULL END)</formula>
      <argument type='real' />
    </function>
    <function group='string' name='CHAR' return-type='str'>
      <formula>(CASE WHEN (%1 &gt;= 0) AND (%1 &lt; 256) THEN {fn CHAR(%1)} ELSE NULL END)</formula>
      <argument type='int' />
    </function>
    <function group='string' name='CONTAINS' return-type='bool'>
      <formula>(POSITION(%2 IN %1) &gt; 0)</formula>
      <argument type='str' />
      <argument type='str' />
    </function>
    <function group='string' name='ENDSWITH' return-type='bool'>
      <formula>&#10;(CASE WHEN ((CASE WHEN ({fn CHAR_LENGTH(%1)} - {fn CHAR_LENGTH(%2)}) &lt; 0 THEN 1&#10;      ELSE {fn CHAR_LENGTH(%1)} - {fn CHAR_LENGTH(%2)} + 1 END)&#10; IS NULL) OR ({fn CHAR_LENGTH(%2)} IS NULL) THEN NULL&#10;      WHEN {fn CHAR_LENGTH(%2)} &lt; 1 THEN &apos;&apos;&#10;      WHEN (CASE WHEN ({fn CHAR_LENGTH(%1)} - {fn CHAR_LENGTH(%2)}) &lt; 0 THEN 1&#10;      ELSE {fn CHAR_LENGTH(%1)} - {fn CHAR_LENGTH(%2)} + 1 END)&#10; &lt; 1 THEN {fn SUBSTRING({fn RTRIM(%1)},1,{fn CHAR_LENGTH(%2)})}&#10;      ELSE {fn SUBSTRING({fn RTRIM(%1)},(CASE WHEN ({fn CHAR_LENGTH(%1)} - {fn CHAR_LENGTH(%2)}) &lt; 0 THEN 1&#10;      ELSE {fn CHAR_LENGTH(%1)} - {fn CHAR_LENGTH(%2)} + 1 END)&#10;,{fn CHAR_LENGTH(%2)})} END) = %2</formula>
      <argument type='str' />
      <argument type='str' />
    </function>
    <function group='string' name='FIND' return-type='int'>
      <formula>POSITION(%2 IN %1)</formula>
      <argument type='str' />
      <argument type='str' />
    </function>
    <function group='string' name='FIND' return-type='int'>
      <formula>(CASE&#10;&#9;WHEN %3 IS NULL THEN NULL&#10;&#9;WHEN 0 = STRPOS(SUBSTR(%1,INT4LARGER(1,CAST(FLOOR(%3) AS INTEGER))),CAST(%2 AS TEXT)) THEN 0&#10;&#9;ELSE (STRPOS(SUBSTR(%1,INT4LARGER(1,CAST(FLOOR(%3)AS INTEGER))),CAST(%2 AS TEXT)) + INT4LARGER(1,CAST(FLOOR(%3) AS INTEGER)) - 1)&#9;END)</formula>
      <argument type='str' />
      <argument type='str' />
      <argument type='real' />
    </function>
    <function group='string' name='FIND' return-type='int'>
      <formula>(CASE&#10;&#9;WHEN %3 IS NULL THEN NULL&#10;&#9;WHEN 0 = STRPOS(SUBSTR(%1,INT4LARGER(1,%3)),CAST(%2 AS TEXT)) THEN 0&#10;&#9;ELSE (STRPOS(SUBSTR(%1,INT4LARGER(1,%3)),CAST(%2 AS TEXT)) + INT4LARGER(1,%3) - 1)&#9;END)</formula>
      <argument type='str' />
      <argument type='str' />
      <argument type='int' />
    </function>
    <function group='string' name='LEFT' return-type='str'>
      <formula>CASE WHEN %2 &gt;= 0 THEN {fn SUBSTRING(%1,1,CAST(TRUNC(%2) AS INTEGER))} ELSE NULL END</formula>
      <argument type='str' />
      <argument type='real' />
    </function>
    <function group='string' name='LEFT' return-type='str'>
      <formula>CASE WHEN %2 &gt;= 0 THEN {fn SUBSTRING(%1,1,%2)} ELSE NULL END</formula>
      <argument type='str' />
      <argument type='int' />
    </function>
    <function group='string' name='LEN' return-type='int'>
      <formula>{fn CHAR_LENGTH(%1)}</formula>
      <argument type='str' />
    </function>
    <function group='string' name='LOWER' return-type='str'>
      <formula>{fn LCASE(%1)}</formula>
      <argument type='str' />
    </function>
    <function group='string' name='LTRIM' return-type='str'>
      <formula>{fn LTRIM(%1)}</formula>
      <argument type='str' />
    </function>
    <function group='string' name='MAX' return-type='str'>
      <formula>(CASE&#10;&#9;WHEN (%1 IS NULL) OR (%2 IS NULL) THEN NULL&#10;&#9;WHEN %1 &gt; %2 THEN %1&#10;&#9;ELSE %2 END)</formula>
      <argument type='str' />
      <argument type='str' />
    </function>
    <function group='string' name='MID' return-type='str'>
      <formula>&#10;(CASE WHEN (%2 IS NULL) OR %2 &lt; 1 THEN NULL&#10;      ELSE {fn SUBSTRING(%1,CAST(TRUNC(%2) AS INTEGER),{fn CHAR_LENGTH(%1)} - (CAST(TRUNC(%2) AS INTEGER)) + 1)} END)</formula>
      <argument type='str' />
      <argument type='real' />
    </function>
    <function group='string' name='MID' return-type='str'>
      <formula>&#10;(CASE WHEN (%2 IS NULL) OR %2 &lt; 1 THEN NULL&#10;      ELSE {fn SUBSTRING(%1,%2,{fn CHAR_LENGTH(%1)} - (%2) + 1)} END)</formula>
      <argument type='str' />
      <argument type='int' />
    </function>
    <function group='string' name='MID' return-type='str'>
      <formula>&#10;(CASE WHEN (%2 IS NULL) OR (%3 IS NULL) THEN NULL&#10;      WHEN %3 &lt; 1 THEN &apos;&apos;&#10;      WHEN %2 &lt; 1 THEN {fn SUBSTRING(%1,1,CAST(TRUNC(%3) AS INTEGER))}&#10;      ELSE {fn SUBSTRING(%1,CAST(TRUNC(%2) AS INTEGER),CAST(TRUNC(%3) AS INTEGER))} END)</formula>
      <argument type='str' />
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='string' name='MID' return-type='str'>
      <formula>&#10;(CASE WHEN (%2 IS NULL) OR (%3 IS NULL) THEN NULL&#10;      WHEN %3 &lt; 1 THEN &apos;&apos;&#10;      WHEN %2 &lt; 1 THEN {fn SUBSTRING(%1,1,%3)}&#10;      ELSE {fn SUBSTRING(%1,%2,%3)} END)</formula>
      <argument type='str' />
      <argument type='int' />
      <argument type='int' />
    </function>
    <function group='string' name='MIN' return-type='str'>
      <formula>(CASE&#10;&#9;WHEN (%1 IS NULL) OR (%2 IS NULL) THEN NULL&#10;&#9;WHEN %1 &lt; %2 THEN %1&#10;&#9;ELSE %2 END)</formula>
      <argument type='str' />
      <argument type='str' />
    </function>
    <function group='string' name='REGEXP_EXTRACT' return-type='str'>
      <formula>SUBSTRING(%1, %2)</formula>
      <argument type='str' />
      <argument type='str' />
    </function>
    <function group='string' name='REGEXP_EXTRACT_NTH' return-type='str'>
      <formula>REGEXP_REPLACE(SUBSTRING(%1, (&apos;(&apos; || %2 || &apos;)&apos;)), %2, &apos;\\%3&apos;)</formula>
      <argument type='str' />
      <argument type='str' />
      <argument type='localint' />
    </function>
    <function group='string' name='REGEXP_MATCH' return-type='bool'>
      <formula>(%1 ~ %2)</formula>
      <argument type='str' />
      <argument type='str' />
    </function>
    <function group='string' name='REGEXP_REPLACE' return-type='str'>
      <formula>REGEXP_REPLACE(%1, %2, %3, &apos;g&apos;)</formula>
      <argument type='str' />
      <argument type='str' />
      <argument type='str' />
    </function>
    <function group='string' name='REPLACE' return-type='str'>
      <formula>{fn REPLACE(%1,%2,%3)}</formula>
      <argument type='str' />
      <argument type='str' />
      <argument type='str' />
    </function>
    <function group='string' name='RIGHT' return-type='str'>
      <formula>CASE WHEN %2 &gt;= 0 THEN {fn SUBSTRING(%1,{fn CHAR_LENGTH(%1)} - CAST(TRUNC(%2) AS INTEGER) + 1,CAST(TRUNC(%2) AS INTEGER))} ELSE NULL END</formula>
      <argument type='str' />
      <argument type='real' />
    </function>
    <function group='string' name='RIGHT' return-type='str'>
      <formula>CASE WHEN %2 &gt;= 0 THEN {fn SUBSTRING(%1,{fn CHAR_LENGTH(%1)} - %2 + 1,%2)} ELSE NULL END</formula>
      <argument type='str' />
      <argument type='int' />
    </function>
    <function group='string' name='RTRIM' return-type='str'>
      <formula>{fn RTRIM(%1)}</formula>
      <argument type='str' />
    </function>
    <function group='string' name='SPACE' return-type='str'>
      <formula>(CASE WHEN CAST(TRUNC(%1) AS INTEGER) &gt;= 0 THEN {fn REPEAT(&apos; &apos;, CAST(TRUNC(%1) AS INTEGER))} ELSE NULL END)</formula>
      <argument type='real' />
    </function>
    <function group='string' name='SPACE' return-type='str'>
      <formula>(CASE WHEN %1 &gt;= 0 THEN {fn REPEAT(&apos; &apos;, %1)} ELSE NULL END)</formula>
      <argument type='int' />
    </function>
    <function group='string' name='STARTSWITH' return-type='bool'>
      <formula>&#10;(CASE WHEN (1 IS NULL) OR ({fn CHAR_LENGTH(%2)} IS NULL) THEN NULL&#10;      WHEN {fn CHAR_LENGTH(%2)} &lt; 1 THEN &apos;&apos;&#10;      WHEN 1 &lt; 1 THEN {fn SUBSTRING(%1,1,{fn CHAR_LENGTH(%2)})}&#10;      ELSE {fn SUBSTRING(%1,1,{fn CHAR_LENGTH(%2)})} END) = %2</formula>
      <argument type='str' />
      <argument type='str' />
    </function>
    <function group='string' name='TRIM' return-type='str'>
      <formula>TRIM(BOTH &apos; &apos; FROM %1)</formula>
      <argument type='str' />
    </function>
    <function group='string' name='UPPER' return-type='str'>
      <formula>{fn UCASE(%1)}</formula>
      <argument type='str' />
    </function>
    <function group='date' name='DAY' return-type='int'>
      <formula>CAST(TRUNC(EXTRACT(DAY FROM %1)) AS INTEGER)</formula>
      <argument type='datetime' />
    </function>
    <function group='date' name='MAX' return-type='datetime'>
      <formula>(CASE&#10;&#9;WHEN (%1 IS NULL) OR (%2 IS NULL) THEN NULL&#10;&#9;WHEN %1 &gt; %2 THEN %1&#10;&#9;ELSE %2 END)</formula>
      <argument type='datetime' />
      <argument type='datetime' />
    </function>
    <function group='date' name='MAX' return-type='date'>
      <formula>(CASE&#10;&#9;WHEN (%1 IS NULL) OR (%2 IS NULL) THEN NULL&#10;&#9;WHEN %1 &gt; %2 THEN %1&#10;&#9;ELSE %2 END)</formula>
      <argument type='date' />
      <argument type='date' />
    </function>
    <function group='date' name='MIN' return-type='datetime'>
      <formula>(CASE&#10;&#9;WHEN (%1 IS NULL) OR (%2 IS NULL) THEN NULL&#10;&#9;WHEN %1 &lt; %2 THEN %1&#10;&#9;ELSE %2 END)</formula>
      <argument type='datetime' />
      <argument type='datetime' />
    </function>
    <function group='date' name='MIN' return-type='date'>
      <formula>(CASE&#10;&#9;WHEN (%1 IS NULL) OR (%2 IS NULL) THEN NULL&#10;&#9;WHEN %1 &lt; %2 THEN %1&#10;&#9;ELSE %2 END)</formula>
      <argument type='date' />
      <argument type='date' />
    </function>
    <function group='date' name='MONTH' return-type='int'>
      <formula>CAST(TRUNC(EXTRACT(MONTH FROM %1)) AS INTEGER)</formula>
      <argument type='datetime' />
    </function>
    <function group='date' name='NOW' return-type='datetime'>
      <formula>{fn CURRENT_TIMESTAMP(0)}</formula>
    </function>
    <function group='date' name='QUARTER' return-type='int'>
      <formula>CAST(TRUNC((EXTRACT(MONTH FROM %1) - 1) / 3 + 1) AS INTEGER)</formula>
      <argument type='datetime' />
    </function>
    <function group='date' name='TODAY' return-type='date'>
      <formula>{fn CURRENT_DATE()}</formula>
    </function>
    <function group='date' name='WEEK' return-type='int'>
      <formula>CAST(TRUNC((5 + CAST((CAST(%1 AS DATE) - CAST(((CAST(%1 AS DATE) + CAST(TRUNC((-1 * (EXTRACT(DAY FROM %1) - 1))) AS INTEGER) * INTERVAL &apos;1 DAY&apos;) + CAST(TRUNC((-1 * (EXTRACT(MONTH FROM %1) - 1))) AS INTEGER) * INTERVAL &apos;1 MONTH&apos;) AS DATE)) AS INTEGER) + 1 + (1 + ({fn MOD((({fn MOD(CAST((CAST(((CAST(%1 AS DATE) + CAST(TRUNC((-1 * (EXTRACT(DAY FROM %1) - 1))) AS INTEGER) * INTERVAL &apos;1 DAY&apos;) + CAST(TRUNC((-1 * (EXTRACT(MONTH FROM %1) - 1))) AS INTEGER) * INTERVAL &apos;1 MONTH&apos;) AS DATE) - {d &apos;1995-01-01&apos;}) AS INTEGER), 7)}) + 7), 7)}))) / 7) AS INTEGER)</formula>
      <argument type='datetime' />
    </function>
    <function group='date' name='YEAR' return-type='int'>
      <formula>CAST(TRUNC(EXTRACT(YEAR FROM %1)) AS INTEGER)</formula>
      <argument type='datetime' />
    </function>
    <function group='cast' name='DATE' return-type='date'>
      <formula>({d &apos;1900-01-01&apos;} + CAST(TRUNC(%1) AS INTEGER) * INTERVAL &apos;1 DAY&apos;)</formula>
      <argument type='real' />
    </function>
    <function group='cast' name='DATE' return-type='date'>
      <formula>({d &apos;1900-01-01&apos;} + %1 * INTERVAL &apos;1 DAY&apos;)</formula>
      <argument type='int' />
    </function>
    <function group='cast' name='DATE' return-type='date'>
      <formula>CAST(%1 AS DATE)</formula>
      <argument type='str' />
    </function>
    <function group='cast' name='DATE' return-type='date'>
      <formula>CAST(%1 AS DATE)</formula>
      <argument type='datetime' />
    </function>
    <function group='cast' name='DATE' return-type='date'>
      <formula>CAST(%1 AS DATE)</formula>
      <argument type='date' />
    </function>
    <function group='cast' name='DATETIME' return-type='datetime'>
      <formula>(((({ts &apos;1900-01-01 00:00:00&apos;} + CAST(TRUNC(%1) AS INTEGER) * INTERVAL &apos;1 DAY&apos;) + CAST(TRUNC((%1 - TRUNC(%1)) * 24) AS INTEGER) * INTERVAL &apos;1 HOUR&apos;) + CAST(TRUNC((%1 * 24 - TRUNC(%1 * 24)) * 60) AS INTEGER) * INTERVAL &apos;1 MINUTE&apos;) + CAST(TRUNC((%1 * 24 * 60 - TRUNC(%1 * 24 * 60)) * 60) AS INTEGER) * INTERVAL &apos;1 SECOND&apos;)</formula>
      <argument type='real' />
    </function>
    <function group='cast' name='DATETIME' return-type='datetime'>
      <formula>CAST(%1 AS TIMESTAMP)</formula>
      <argument type='str' />
    </function>
    <function group='cast' name='DATETIME' return-type='datetime'>
      <formula>CAST(%1 AS TIMESTAMP)</formula>
      <argument type='datetime' />
    </function>
    <function group='cast' name='DATETIME' return-type='datetime'>
      <formula>CAST(%1 AS TIMESTAMP)</formula>
      <argument type='date' />
    </function>
    <function group='cast' name='FLOAT' return-type='real'>
      <formula>(CASE&#10;&#9;WHEN %1 THEN 1.0&#10;&#9;WHEN NOT %1 THEN 0.0&#10;&#9;ELSE NULL END)</formula>
      <argument type='bool' />
    </function>
    <function group='cast' name='FLOAT' return-type='real'>
      <formula>CAST(%1 AS FLOAT)</formula>
      <argument type='real' />
    </function>
    <function group='cast' name='FLOAT' return-type='real'>
      <formula>CAST(%1 AS FLOAT)</formula>
      <argument type='int' />
    </function>
    <function group='cast' name='FLOAT' return-type='real'>
      <formula>CAST(%1 AS FLOAT)</formula>
      <argument type='str' />
    </function>
    <function group='cast' name='FLOAT' return-type='real'>
      <formula>(CAST((CAST(%1 AS DATE) - {d &apos;1900-01-01&apos;}) AS INTEGER) + EXTRACT(HOUR FROM %1) / 24.0 + EXTRACT(MINUTE FROM %1) / (24.0 * 60) + EXTRACT(SECOND FROM %1) / (24.0 * 60 * 60))</formula>
      <argument type='datetime' />
    </function>
    <function group='cast' name='FLOAT' return-type='real'>
      <formula>CAST((%1 - {d &apos;1900-01-01&apos;}) AS INTEGER)</formula>
      <argument type='date' />
    </function>
    <function group='cast' name='INT' return-type='int'>
      <formula>(CASE&#10;&#9;WHEN %1 THEN 1&#10;&#9;WHEN NOT %1 THEN 0&#10;&#9;ELSE NULL END)</formula>
      <argument type='bool' />
    </function>
    <function group='cast' name='INT' return-type='int'>
      <formula>CAST(TRUNC(%1) AS BIGINT)</formula>
      <argument type='real' />
    </function>
    <function group='cast' name='INT' return-type='int'>
      <formula>CAST(%1 AS INTEGER)</formula>
      <argument type='int' />
    </function>
    <function group='cast' name='INT' return-type='int'>
      <formula>CAST(TRUNC(CAST(%1 AS DOUBLE PRECISION)) AS BIGINT)</formula>
      <argument type='str' />
    </function>
    <function group='cast' name='INT' return-type='int'>
      <formula>CAST((CAST(%1 AS DATE) - {d &apos;1900-01-01&apos;}) AS INTEGER)</formula>
      <argument type='datetime' />
    </function>
    <function group='cast' name='INT' return-type='int'>
      <formula>CAST((%1 - {d &apos;1900-01-01&apos;}) AS INTEGER)</formula>
      <argument type='date' />
    </function>
    <function group='cast' name='STR' return-type='str'>
      <formula>(CASE&#10;&#9;WHEN %1 THEN &apos;1&apos;&#10;&#9;WHEN NOT %1 THEN &apos;0&apos;&#10;&#9;ELSE NULL END)</formula>
      <argument type='bool' />
    </function>
    <function group='cast' name='STR' return-type='str'>
      <formula>CAST(%1 AS VARCHAR(23))</formula>
      <argument type='real' />
    </function>
    <function group='cast' name='STR' return-type='str'>
      <formula>CAST(%1 AS VARCHAR(21))</formula>
      <argument type='int' />
    </function>
    <function group='cast' name='STR' return-type='str'>
      <formula>CAST(%1 AS VARCHAR(100))</formula>
      <argument type='str' />
    </function>
    <function group='cast' name='STR' return-type='str'>
      <formula>CAST(%1 AS VARCHAR(27))</formula>
      <argument type='datetime' />
    </function>
    <function group='cast' name='STR' return-type='str'>
      <formula>CAST(%1 AS VARCHAR(10))</formula>
      <argument type='date' />
    </function>
    <function group='logical' name='IFNULL' return-type='bool'>
      <formula>(CASE WHEN %1 THEN 1 WHEN NOT %1 THEN 0 ELSE (CASE WHEN %2 THEN 1 WHEN NOT %2 THEN 0 ELSE NULL END) END)=1</formula>
      <argument type='bool' />
      <argument type='bool' />
    </function>
    <function group='logical' name='IFNULL' return-type='real'>
      <formula>{fn IFNULL(%1, %2)}</formula>
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='logical' name='IFNULL' return-type='int'>
      <formula>{fn IFNULL(%1, %2)}</formula>
      <argument type='int' />
      <argument type='int' />
    </function>
    <function group='logical' name='IFNULL' return-type='str'>
      <formula>{fn IFNULL(%1, %2)}</formula>
      <argument type='str' />
      <argument type='str' />
    </function>
    <function group='logical' name='IFNULL' return-type='datetime'>
      <formula>{fn IFNULL(%1, %2)}</formula>
      <argument type='datetime' />
      <argument type='datetime' />
    </function>
    <function group='logical' name='IFNULL' return-type='date'>
      <formula>{fn IFNULL(%1, %2)}</formula>
      <argument type='date' />
      <argument type='date' />
    </function>
    <function group='logical' name='IIF' return-type='bool'>
      <formula>((%1 AND %2) OR ((NOT %1) AND %3))</formula>
      <argument type='bool' />
      <argument type='bool' />
      <argument type='bool' />
    </function>
    <function group='logical' name='IIF' return-type='real'>
      <formula>(CASE WHEN %1 THEN %2 WHEN NOT %1 THEN %3 ELSE NULL END)</formula>
      <argument type='bool' />
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='logical' name='IIF' return-type='real'>
      <formula>(CASE WHEN %1 THEN %2 WHEN NOT %1 THEN %3 ELSE %4 END)</formula>
      <argument type='bool' />
      <argument type='real' />
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='logical' name='IIF' return-type='int'>
      <formula>(CASE WHEN %1 THEN %2 WHEN NOT %1 THEN %3 ELSE NULL END)</formula>
      <argument type='bool' />
      <argument type='int' />
      <argument type='int' />
    </function>
    <function group='logical' name='IIF' return-type='int'>
      <formula>(CASE WHEN %1 THEN %2 WHEN NOT %1 THEN %3 ELSE %4 END)</formula>
      <argument type='bool' />
      <argument type='int' />
      <argument type='int' />
      <argument type='int' />
    </function>
    <function group='logical' name='IIF' return-type='str'>
      <formula>(CASE WHEN %1 THEN %2 WHEN NOT %1 THEN %3 ELSE NULL END)</formula>
      <argument type='bool' />
      <argument type='str' />
      <argument type='str' />
    </function>
    <function group='logical' name='IIF' return-type='str'>
      <formula>(CASE WHEN %1 THEN %2 WHEN NOT %1 THEN %3 ELSE %4 END)</formula>
      <argument type='bool' />
      <argument type='str' />
      <argument type='str' />
      <argument type='str' />
    </function>
    <function group='logical' name='IIF' return-type='datetime'>
      <formula>(CASE WHEN %1 THEN %2 WHEN NOT %1 THEN %3 ELSE NULL END)</formula>
      <argument type='bool' />
      <argument type='datetime' />
      <argument type='datetime' />
    </function>
    <function group='logical' name='IIF' return-type='datetime'>
      <formula>(CASE WHEN %1 THEN %2 WHEN NOT %1 THEN %3 ELSE %4 END)</formula>
      <argument type='bool' />
      <argument type='datetime' />
      <argument type='datetime' />
      <argument type='datetime' />
    </function>
    <function group='logical' name='IIF' return-type='date'>
      <formula>(CASE WHEN %1 THEN %2 WHEN NOT %1 THEN %3 ELSE NULL END)</formula>
      <argument type='bool' />
      <argument type='date' />
      <argument type='date' />
    </function>
    <function group='logical' name='IIF' return-type='date'>
      <formula>(CASE WHEN %1 THEN %2 WHEN NOT %1 THEN %3 ELSE %4 END)</formula>
      <argument type='bool' />
      <argument type='date' />
      <argument type='date' />
      <argument type='date' />
    </function>
    <function group='logical' name='ISNULL' return-type='bool'>
      <formula>(CASE WHEN %1 THEN 0 WHEN NOT %1 THEN 0 ELSE 1 END)=1</formula>
      <argument type='bool' />
    </function>
    <function group='logical' name='ISNULL' return-type='bool'>
      <formula>(%1 IS NULL)</formula>
      <argument type='real' />
    </function>
    <function group='logical' name='ISNULL' return-type='bool'>
      <formula>(%1 IS NULL)</formula>
      <argument type='str' />
    </function>
    <function group='logical' name='ISNULL' return-type='bool'>
      <formula>(%1 IS NULL)</formula>
      <argument type='datetime' />
    </function>
    <function group='aggregate' name='AVG' return-type='real'>
      <formula>AVG(%1)</formula>
      <unagg-formula>%1</unagg-formula>
      <argument type='real' />
    </function>
    <function group='aggregate' name='AVG' return-type='real'>
      <formula>AVG(CAST(%1 AS FLOAT))</formula>
      <unagg-formula>%1</unagg-formula>
      <argument type='int' />
    </function>
    <function group='aggregate' name='COUNT' return-type='int'>
      <formula>COUNT(CASE WHEN %1 THEN 1 WHEN NOT %1 THEN 0 ELSE NULL END)</formula>
      <unagg-formula>(CASE WHEN %1 THEN 1 WHEN NOT %1 THEN 1 ELSE 0 END)</unagg-formula>
      <argument type='bool' />
    </function>
    <function group='aggregate' name='COUNT' return-type='int'>
      <formula>COUNT(%1)</formula>
      <unagg-formula>(CASE WHEN (%1 IS NULL) THEN 0 ELSE 1 END)</unagg-formula>
      <argument type='real' />
    </function>
    <function group='aggregate' name='COUNT' return-type='int'>
      <formula>COUNT(%1)</formula>
      <unagg-formula>(CASE WHEN (%1 IS NULL) THEN 0 ELSE 1 END)</unagg-formula>
      <argument type='str' />
    </function>
    <function group='aggregate' name='COUNT' return-type='int'>
      <formula>COUNT(%1)</formula>
      <unagg-formula>(CASE WHEN (%1 IS NULL) THEN 0 ELSE 1 END)</unagg-formula>
      <argument type='datetime' />
    </function>
    <function group='aggregate' name='COUNTD' return-type='int'>
      <formula>COUNT(DISTINCT (CASE WHEN %1 THEN 1 WHEN NOT %1 THEN 0 ELSE NULL END))</formula>
      <unagg-formula>(CASE WHEN %1 THEN 1 WHEN NOT %1 THEN 1 ELSE 0 END)</unagg-formula>
      <argument type='bool' />
    </function>
    <function group='aggregate' name='COUNTD' return-type='int'>
      <formula>COUNT(DISTINCT %1)</formula>
      <unagg-formula>(CASE WHEN (%1 IS NULL) THEN 0 ELSE 1 END)</unagg-formula>
      <argument type='real' />
    </function>
    <function group='aggregate' name='COUNTD' return-type='int'>
      <formula>COUNT(DISTINCT %1)</formula>
      <unagg-formula>(CASE WHEN (%1 IS NULL) THEN 0 ELSE 1 END)</unagg-formula>
      <argument type='str' />
    </function>
    <function group='aggregate' name='COUNTD' return-type='int'>
      <formula>COUNT(DISTINCT %1)</formula>
      <unagg-formula>(CASE WHEN (%1 IS NULL) THEN 0 ELSE 1 END)</unagg-formula>
      <argument type='datetime' />
    </function>
    <function group='aggregate' name='MAX' return-type='bool'>
      <formula>(MAX(CASE WHEN %1 THEN 1 WHEN NOT %1 THEN 0 ELSE NULL END)=1)</formula>
      <unagg-formula>%1</unagg-formula>
      <argument type='bool' />
    </function>
    <function group='aggregate' name='MAX' return-type='real'>
      <formula>MAX(%1)</formula>
      <unagg-formula>%1</unagg-formula>
      <argument type='real' />
    </function>
    <function group='aggregate' name='MAX' return-type='int'>
      <formula>MAX(%1)</formula>
      <unagg-formula>%1</unagg-formula>
      <argument type='int' />
    </function>
    <function group='aggregate' name='MAX' return-type='str'>
      <formula>MAX(%1)</formula>
      <unagg-formula>%1</unagg-formula>
      <argument type='str' />
    </function>
    <function group='aggregate' name='MAX' return-type='datetime'>
      <formula>MAX(%1)</formula>
      <unagg-formula>%1</unagg-formula>
      <argument type='datetime' />
    </function>
    <function group='aggregate' name='MAX' return-type='date'>
      <formula>MAX(%1)</formula>
      <unagg-formula>%1</unagg-formula>
      <argument type='date' />
    </function>
    <function group='aggregate' name='MIN' return-type='bool'>
      <formula>(MIN(CASE WHEN %1 THEN 1 WHEN NOT %1 THEN 0 ELSE NULL END)=1)</formula>
      <unagg-formula>%1</unagg-formula>
      <argument type='bool' />
    </function>
    <function group='aggregate' name='MIN' return-type='real'>
      <formula>MIN(%1)</formula>
      <unagg-formula>%1</unagg-formula>
      <argument type='real' />
    </function>
    <function group='aggregate' name='MIN' return-type='int'>
      <formula>MIN(%1)</formula>
      <unagg-formula>%1</unagg-formula>
      <argument type='int' />
    </function>
    <function group='aggregate' name='MIN' return-type='str'>
      <formula>MIN(%1)</formula>
      <unagg-formula>%1</unagg-formula>
      <argument type='str' />
    </function>
    <function group='aggregate' name='MIN' return-type='datetime'>
      <formula>MIN(%1)</formula>
      <unagg-formula>%1</unagg-formula>
      <argument type='datetime' />
    </function>
    <function group='aggregate' name='MIN' return-type='date'>
      <formula>MIN(%1)</formula>
      <unagg-formula>%1</unagg-formula>
      <argument type='date' />
    </function>
    <function group='aggregate' name='STDEV' return-type='real'>
      <formula>STDDEV(%1)</formula>
      <unagg-formula>CAST(NULL AS DOUBLE PRECISION)</unagg-formula>
      <argument type='real' />
    </function>
    <function group='aggregate' name='STDEVP' return-type='real'>
      <formula>STDDEV_POP(%1)</formula>
      <unagg-formula>(CASE WHEN %1 IS NULL THEN CAST(NULL AS DOUBLE PRECISION) ELSE 0.0 END)</unagg-formula>
      <argument type='real' />
    </function>
    <function group='aggregate' name='SUM' return-type='real'>
      <formula>SUM(%1)</formula>
      <unagg-formula>%1</unagg-formula>
      <argument type='real' />
    </function>
    <function group='aggregate' name='SUM' return-type='int'>
      <formula>SUM(%1)</formula>
      <unagg-formula>%1</unagg-formula>
      <argument type='int' />
    </function>
    <function group='aggregate' name='VAR' return-type='real'>
      <formula>VAR_SAMP(%1)</formula>
      <unagg-formula>CAST(NULL AS DOUBLE PRECISION)</unagg-formula>
      <argument type='real' />
    </function>
    <function group='aggregate' name='VARP' return-type='real'>
      <formula>VAR_POP(%1)</formula>
      <unagg-formula>(CASE WHEN %1 IS NULL THEN CAST(NULL AS DOUBLE PRECISION) ELSE 0.0 END)</unagg-formula>
      <argument type='real' />
    </function>
    <function group='operator' name='!' return-type='bool'>
      <formula>(NOT %1)</formula>
      <argument type='bool' />
    </function>
    <function group='operator' name='!=' return-type='bool'>
      <formula>(%1 AND NOT %2 OR NOT %1 AND %2)</formula>
      <argument type='bool' />
      <argument type='bool' />
    </function>
    <function group='operator' name='!=' return-type='bool'>
      <formula>(%1 &lt;&gt; %2)</formula>
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='operator' name='!=' return-type='bool'>
      <formula>(%1 &lt;&gt; %2)</formula>
      <argument type='str' />
      <argument type='str' />
    </function>
    <function group='operator' name='!=' return-type='bool'>
      <formula>(%1 &lt;&gt; %2)</formula>
      <argument type='datetime' />
      <argument type='datetime' />
    </function>
    <function group='operator' name='!=' return-type='bool'>
      <formula>(%1 &lt;&gt; CAST(%2 AS TIMESTAMP))</formula>
      <argument type='datetime' />
      <argument type='date' />
    </function>
    <function group='operator' name='!=' return-type='bool'>
      <formula>(CAST(%1 AS TIMESTAMP) &lt;&gt; %2)</formula>
      <argument type='date' />
      <argument type='datetime' />
    </function>
    <function group='operator' name='!=' return-type='bool'>
      <formula>(%1 &lt;&gt; %2)</formula>
      <argument type='date' />
      <argument type='date' />
    </function>
    <function group='operator' name='%' return-type='real'>
      <formula>( CASE WHEN %2 = 0 THEN NULL ELSE %1 - ( { fn FLOOR ( { fn SIGN (%1) } * (%1/%2 ) ) } * %2 * { fn SIGN (%1) } ) END)</formula>
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='operator' name='%' return-type='int'>
      <formula>({fn MOD(%1, %2)})</formula>
      <argument type='int' />
      <argument type='int' />
    </function>
    <function group='operator' name='&amp;&amp;' return-type='bool'>
      <formula>(%1 AND %2)</formula>
      <argument type='bool' />
      <argument type='bool' />
    </function>
    <function group='operator' name='*' return-type='real'>
      <formula>(%1 * %2)</formula>
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='operator' name='*' return-type='int'>
      <formula>(%1 * %2)</formula>
      <argument type='int' />
      <argument type='int' />
    </function>
    <function group='operator' name='+' return-type='real'>
      <formula>(%1 + %2)</formula>
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='operator' name='+' return-type='int'>
      <formula>(%1 + %2)</formula>
      <argument type='int' />
      <argument type='int' />
    </function>
    <function group='operator' name='+' return-type='str'>
      <formula>(%1 || %2)</formula>
      <argument type='str' />
      <argument type='str' />
    </function>
    <function group='operator' name='+' return-type='datetime'>
      <formula>((((%1 + CAST(TRUNC(%2) AS INTEGER) * INTERVAL &apos;1 DAY&apos;) + CAST(TRUNC((%2 - TRUNC(%2)) * 24) AS INTEGER) * INTERVAL &apos;1 HOUR&apos;) + CAST(TRUNC((%2 * 24 - TRUNC(%2 * 24)) * 60) AS INTEGER) * INTERVAL &apos;1 MINUTE&apos;) + CAST(TRUNC((%2 * 24 * 60 - TRUNC(%2 * 24 * 60)) * 60) AS INTEGER) * INTERVAL &apos;1 SECOND&apos;)</formula>
      <argument type='datetime' />
      <argument type='real' />
    </function>
    <function group='operator' name='+' return-type='datetime'>
      <formula>(%1 + %2 * INTERVAL &apos;1 DAY&apos;)</formula>
      <argument type='datetime' />
      <argument type='int' />
    </function>
    <function group='operator' name='+' return-type='datetime'>
      <formula>((((CAST(%1 AS TIMESTAMP) + CAST(TRUNC(%2) AS INTEGER) * INTERVAL &apos;1 DAY&apos;) + CAST(TRUNC((%2 - TRUNC(%2)) * 24) AS INTEGER) * INTERVAL &apos;1 HOUR&apos;) + CAST(TRUNC((%2 * 24 - TRUNC(%2 * 24)) * 60) AS INTEGER) * INTERVAL &apos;1 MINUTE&apos;) + CAST(TRUNC((%2 * 24 * 60 - TRUNC(%2 * 24 * 60)) * 60) AS INTEGER) * INTERVAL &apos;1 SECOND&apos;)</formula>
      <argument type='date' />
      <argument type='real' />
    </function>
    <function group='operator' name='+' return-type='date'>
      <formula>(%1 + %2 * INTERVAL &apos;1 DAY&apos;)</formula>
      <argument type='date' />
      <argument type='int' />
    </function>
    <function group='operator' name='-' return-type='real'>
      <formula>(-%1)</formula>
      <argument type='real' />
    </function>
    <function group='operator' name='-' return-type='real'>
      <formula>(%1 - %2)</formula>
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='operator' name='-' return-type='real'>
      <formula>(CAST((CAST(%1 AS DATE) - CAST(%2 AS DATE)) AS INTEGER) + (EXTRACT(HOUR FROM %1) - EXTRACT(HOUR FROM %2) + (EXTRACT(MINUTE FROM %1) - EXTRACT(MINUTE FROM %2) + (EXTRACT(SECOND FROM %1) - EXTRACT(SECOND FROM %2)) / 60.0) / 60.0) / 24.0)</formula>
      <argument type='datetime' />
      <argument type='datetime' />
    </function>
    <function group='operator' name='-' return-type='int'>
      <formula>(-%1)</formula>
      <argument type='int' />
    </function>
    <function group='operator' name='-' return-type='int'>
      <formula>(%1 - %2)</formula>
      <argument type='int' />
      <argument type='int' />
    </function>
    <function group='operator' name='-' return-type='int'>
      <formula>(%1 - %2)</formula>
      <argument type='date' />
      <argument type='date' />
    </function>
    <function group='operator' name='-' return-type='datetime'>
      <formula>((((%1 + CAST(TRUNC(-%2) AS INTEGER) * INTERVAL &apos;1 DAY&apos;) + CAST(TRUNC((%2 - TRUNC(%2)) * -24) AS INTEGER) * INTERVAL &apos;1 HOUR&apos;) + CAST(TRUNC((%2 * 24 - TRUNC(%2 * 24)) * -60) AS INTEGER) * INTERVAL &apos;1 MINUTE&apos;) + CAST(TRUNC((%2 * 24 * 60 - TRUNC(%2 * 24 * 60)) * -60) AS INTEGER) * INTERVAL &apos;1 SECOND&apos;)</formula>
      <argument type='datetime' />
      <argument type='real' />
    </function>
    <function group='operator' name='-' return-type='datetime'>
      <formula>(%1 + -%2 * INTERVAL &apos;1 DAY&apos;)</formula>
      <argument type='datetime' />
      <argument type='int' />
    </function>
    <function group='operator' name='-' return-type='datetime'>
      <formula>((((CAST(%1 AS TIMESTAMP) + CAST(TRUNC(-%2) AS INTEGER) * INTERVAL &apos;1 DAY&apos;) + CAST(TRUNC((%2 - TRUNC(%2)) * -24) AS INTEGER) * INTERVAL &apos;1 HOUR&apos;) + CAST(TRUNC((%2 * 24 - TRUNC(%2 * 24)) * -60) AS INTEGER) * INTERVAL &apos;1 MINUTE&apos;) + CAST(TRUNC((%2 * 24 * 60 - TRUNC(%2 * 24 * 60)) * -60) AS INTEGER) * INTERVAL &apos;1 SECOND&apos;)</formula>
      <argument type='date' />
      <argument type='real' />
    </function>
    <function group='operator' name='-' return-type='date'>
      <formula>(%1 + -%2 * INTERVAL &apos;1 DAY&apos;)</formula>
      <argument type='date' />
      <argument type='int' />
    </function>
    <function group='operator' name='/' return-type='real'>
      <formula>(CASE WHEN %2 = 0 THEN NULL ELSE %1 / %2 END)</formula>
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='operator' name='/' return-type='real'>
      <formula>(CASE WHEN %2 = 0 THEN NULL ELSE CAST(%1 AS FLOAT) / %2 END)</formula>
      <argument type='int' />
      <argument type='int' />
    </function>
    <function group='operator' name='&lt;' return-type='bool'>
      <formula>(%1 &lt; %2)</formula>
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='operator' name='&lt;' return-type='bool'>
      <formula>(%1 &lt; %2)</formula>
      <argument type='str' />
      <argument type='str' />
    </function>
    <function group='operator' name='&lt;' return-type='bool'>
      <formula>(%1 &lt; %2)</formula>
      <argument type='datetime' />
      <argument type='datetime' />
    </function>
    <function group='operator' name='&lt;' return-type='bool'>
      <formula>(%1 &lt; CAST(%2 AS TIMESTAMP))</formula>
      <argument type='datetime' />
      <argument type='date' />
    </function>
    <function group='operator' name='&lt;' return-type='bool'>
      <formula>(CAST(%1 AS TIMESTAMP) &lt; %2)</formula>
      <argument type='date' />
      <argument type='datetime' />
    </function>
    <function group='operator' name='&lt;' return-type='bool'>
      <formula>(%1 &lt; %2)</formula>
      <argument type='date' />
      <argument type='date' />
    </function>
    <function group='operator' name='&lt;=' return-type='bool'>
      <formula>(%1 &lt;= %2)</formula>
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='operator' name='&lt;=' return-type='bool'>
      <formula>(%1 &lt;= %2)</formula>
      <argument type='str' />
      <argument type='str' />
    </function>
    <function group='operator' name='&lt;=' return-type='bool'>
      <formula>(%1 &lt;= %2)</formula>
      <argument type='datetime' />
      <argument type='datetime' />
    </function>
    <function group='operator' name='&lt;=' return-type='bool'>
      <formula>(%1 &lt;= CAST(%2 AS TIMESTAMP))</formula>
      <argument type='datetime' />
      <argument type='date' />
    </function>
    <function group='operator' name='&lt;=' return-type='bool'>
      <formula>(CAST(%1 AS TIMESTAMP) &lt;= %2)</formula>
      <argument type='date' />
      <argument type='datetime' />
    </function>
    <function group='operator' name='&lt;=' return-type='bool'>
      <formula>(%1 &lt;= %2)</formula>
      <argument type='date' />
      <argument type='date' />
    </function>
    <function group='operator' name='==' return-type='bool'>
      <formula>(%1 AND %2 OR NOT %1 AND NOT %2)</formula>
      <argument type='bool' />
      <argument type='bool' />
    </function>
    <function group='operator' name='==' return-type='bool'>
      <formula>(%1 = %2)</formula>
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='operator' name='==' return-type='bool'>
      <formula>(%1 = %2)</formula>
      <argument type='str' />
      <argument type='str' />
    </function>
    <function group='operator' name='==' return-type='bool'>
      <formula>(%1 = %2)</formula>
      <argument type='datetime' />
      <argument type='datetime' />
    </function>
    <function group='operator' name='==' return-type='bool'>
      <formula>(%1 = CAST(%2 AS TIMESTAMP))</formula>
      <argument type='datetime' />
      <argument type='date' />
    </function>
    <function group='operator' name='==' return-type='bool'>
      <formula>(CAST(%1 AS TIMESTAMP) = %2)</formula>
      <argument type='date' />
      <argument type='datetime' />
    </function>
    <function group='operator' name='==' return-type='bool'>
      <formula>(%1 = %2)</formula>
      <argument type='date' />
      <argument type='date' />
    </function>
    <function group='operator' name='&gt;' return-type='bool'>
      <formula>(%1 &gt; %2)</formula>
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='operator' name='&gt;' return-type='bool'>
      <formula>(%1 &gt; %2)</formula>
      <argument type='str' />
      <argument type='str' />
    </function>
    <function group='operator' name='&gt;' return-type='bool'>
      <formula>(%1 &gt; %2)</formula>
      <argument type='datetime' />
      <argument type='datetime' />
    </function>
    <function group='operator' name='&gt;' return-type='bool'>
      <formula>(%1 &gt; CAST(%2 AS TIMESTAMP))</formula>
      <argument type='datetime' />
      <argument type='date' />
    </function>
    <function group='operator' name='&gt;' return-type='bool'>
      <formula>(CAST(%1 AS TIMESTAMP) &gt; %2)</formula>
      <argument type='date' />
      <argument type='datetime' />
    </function>
    <function group='operator' name='&gt;' return-type='bool'>
      <formula>(%1 &gt; %2)</formula>
      <argument type='date' />
      <argument type='date' />
    </function>
    <function group='operator' name='&gt;=' return-type='bool'>
      <formula>(%1 &gt;= %2)</formula>
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='operator' name='&gt;=' return-type='bool'>
      <formula>(%1 &gt;= %2)</formula>
      <argument type='str' />
      <argument type='str' />
    </function>
    <function group='operator' name='&gt;=' return-type='bool'>
      <formula>(%1 &gt;= %2)</formula>
      <argument type='datetime' />
      <argument type='datetime' />
    </function>
    <function group='operator' name='&gt;=' return-type='bool'>
      <formula>(%1 &gt;= CAST(%2 AS TIMESTAMP))</formula>
      <argument type='datetime' />
      <argument type='date' />
    </function>
    <function group='operator' name='&gt;=' return-type='bool'>
      <formula>(CAST(%1 AS TIMESTAMP) &gt;= %2)</formula>
      <argument type='date' />
      <argument type='datetime' />
    </function>
    <function group='operator' name='&gt;=' return-type='bool'>
      <formula>(%1 &gt;= %2)</formula>
      <argument type='date' />
      <argument type='date' />
    </function>
    <function group='operator' name='^^' return-type='real'>
      <formula>(CASE WHEN %1 &lt; 0 AND FLOOR(%2) &lt;&gt; %2 THEN NULL ELSE POW(%1,%2) END)</formula>
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='operator' name='^^' return-type='real'>
      <formula>POW(%1,%2)</formula>
      <argument type='real' />
      <argument type='int' />
    </function>
    <function group='operator' name='^^' return-type='real'>
      <formula>CAST(%1 AS FLOAT) ^ %2</formula>
      <argument type='int' />
      <argument type='int' />
    </function>
    <function group='operator' name='||' return-type='bool'>
      <formula>(%1 OR %2)</formula>
      <argument type='bool' />
      <argument type='bool' />
    </function>
  </function-map>
  <supported-aggregations>
    <aggregation value='AGG_SUM' />
    <aggregation value='AGG_AVG' />
    <aggregation value='AGG_MIN' />
    <aggregation value='AGG_MAX' />
    <aggregation value='AGG_STDEV' />
    <aggregation value='AGG_STDEVP' />
    <aggregation value='AGG_VAR' />
    <aggregation value='AGG_VARP' />
    <aggregation value='AGG_COUNT' />
    <aggregation value='AGG_COUNTD' />
    <aggregation value='AGG_YEAR' />
    <aggregation value='AGG_QTR' />
    <aggregation value='AGG_MONTH' />
    <aggregation value='AGG_DAY' />
    <aggregation value='AGG_HOUR' />
    <aggregation value='AGG_MINUTE' />
    <aggregation value='AGG_SECOND' />
    <aggregation value='AGG_WEEK' />
    <aggregation value='AGG_WEEKDAY' />
    <aggregation value='AGG_MONTHYEAR' />
    <aggregation value='AGG_MDY' />
    <aggregation value='TRUNC_YEAR' />
    <aggregation value='TRUNC_QTR' />
    <aggregation value='TRUNC_MONTH' />
    <aggregation value='TRUNC_WEEK' />
    <aggregation value='TRUNC_DAY' />
    <aggregation value='TRUNC_HOUR' />
    <aggregation value='TRUNC_MINUTE' />
    <aggregation value='TRUNC_SECOND' />
  </supported-aggregations>
  <sql-format>
    <format-date-literal formula="{d '%1'}"  format='yyyy-MM-dd' />
    <format-datetime-literal formula="{ts '%1'}" format='yyyy-MM-dd HH:mm:ss.SSS' />
    <format-false value='(0 &lt;&gt; 0)' />
    <format-select>
      <part name='Select' value='SELECT %1' />
      <part name='Into' value='INTO %1' />
      <part name='From' value='FROM %1' />
      <part name='Where' value='WHERE %1' />
      <part name='Group' value='GROUP BY %1' />
      <part name='Having' value='HAVING %1' />
      <part name='OrderBy' value='ORDER BY %1' />
      <part name='Top' value='LIMIT %1 ' />
      <part name='TopPercent' value='LIMIT %1 PERCENT ' />
    </format-select>
    <format-string-literal value='Extended' />
    <format-true value='(1 &lt;&gt; 0)' />
    <id-allowed-characters value='_ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789' />
    <id-max-length value='63' />
    <start-of-week-offset value='1' />
  </sql-format>
</dialect>
